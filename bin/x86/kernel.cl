//// OpenCL kernel functions//__constant sampler_t LINEAR = CLK_NORMALIZED_COORDS_FALSE | CLK_ADDRESS_CLAMP | CLK_FILTER_LINEAR;__constant sampler_t NEAREST = CLK_NORMALIZED_COORDS_FALSE | CLK_ADDRESS_CLAMP | CLK_FILTER_NEAREST;//// Demosaic//__kernel void demosaic(		__read_only image2d_t src,	// CL_UNSIGNED_INT16		__write_only image2d_t left,	// CL_UNSIGNED_INT8 x 4		__write_only image2d_t right)	// CL_UNSIGNED_INT8 x 4{	// calculate 2 x 2 pixels block	int x = get_global_id(0) * 2;	int y = get_global_id(1) * 2;	uint patch[4][4];	uint4 rgb[2][2];	uint p[4][4];	// read data	patch[0][0] = read_imageui(src, NEAREST, (int2)(x - 1, y - 1)).x;	patch[0][1] = read_imageui(src, NEAREST, (int2)(x    , y - 1)).x;	patch[0][2] = read_imageui(src, NEAREST, (int2)(x + 1, y - 1)).x;	patch[0][3] = read_imageui(src, NEAREST, (int2)(x + 2, y - 1)).x;	patch[1][0] = read_imageui(src, NEAREST, (int2)(x - 1, y)).x;	patch[1][1] = read_imageui(src, NEAREST, (int2)(x    , y)).x;	patch[1][2] = read_imageui(src, NEAREST, (int2)(x + 1, y)).x;	patch[1][3] = read_imageui(src, NEAREST, (int2)(x + 2, y)).x;	patch[2][0] = read_imageui(src, NEAREST, (int2)(x - 1, y + 1)).x;	patch[2][1] = read_imageui(src, NEAREST, (int2)(x    , y + 1)).x;	patch[2][2] = read_imageui(src, NEAREST, (int2)(x + 1, y + 1)).x;	patch[2][3] = read_imageui(src, NEAREST, (int2)(x + 2, y + 1)).x;		patch[3][0] = read_imageui(src, NEAREST, (int2)(x - 1, y + 2)).x;	patch[3][1] = read_imageui(src, NEAREST, (int2)(x    , y + 2)).x;	patch[3][2] = read_imageui(src, NEAREST, (int2)(x + 1, y + 2)).x;	patch[3][3] = read_imageui(src, NEAREST, (int2)(x + 2, y + 2)).x;	p[0][0] = patch[0][0] & 0xff;	p[0][1] = patch[0][1] & 0xff;	p[0][2] = patch[0][2] & 0xff;	p[0][3] = patch[0][3] & 0xff;	p[1][0] = patch[1][0] & 0xff;	p[1][1] = patch[1][1] & 0xff;	p[1][2] = patch[1][2] & 0xff;	p[1][3] = patch[1][3] & 0xff;	p[2][0] = patch[2][0] & 0xff;	p[2][1] = patch[2][1] & 0xff;	p[2][2] = patch[2][2] & 0xff;	p[2][3] = patch[2][3] & 0xff;	p[3][0] = patch[3][0] & 0xff;	p[3][1] = patch[3][1] & 0xff;	p[3][2] = patch[3][2] & 0xff;	p[3][3] = patch[3][3] & 0xff;	if (x == 0)	{		p[0][0] = p[0][2];		p[1][0] = p[1][2];		p[2][0] = p[2][2];		p[3][0] = p[3][2];	}	else if (x == get_image_width(src) - 2)	{		p[0][3] = p[0][1];		p[1][3] = p[1][1];		p[2][3] = p[2][1];		p[3][3] = p[3][1];	}	if (y == 0)	{		p[0][0] = p[2][0];		p[0][1] = p[2][1];		p[0][2] = p[2][2];		p[0][3] = p[2][3];	}	else if (y == get_image_height(src) - 2)	{		p[3][0] = p[1][0];		p[3][1] = p[1][1];		p[3][2] = p[1][2];		p[3][3] = p[1][3];	}	rgb[0][0].x = ((p[0][1] + p[2][1]) >> 1); // B 	rgb[0][0].y = (p[1][1]); // G	rgb[0][0].z = ((p[1][0] + p[1][2]) >> 1); // R	rgb[0][0].w = 255;	rgb[0][1].x = (p[2][1]); // B	rgb[0][1].y = ((p[2][0] + p[2][2] + p[1][1] + p[3][1]) >> 2); // G	rgb[0][1].z = ((p[1][0] + p[3][0] + p[1][2] + p[3][2]) >> 2); // R	rgb[0][1].w = 255;	rgb[1][0].x = ((p[0][1] + p[2][1] + p[0][3] + p[2][3]) >> 2); // B	rgb[1][0].y = ((p[0][2] + p[2][2] + p[1][1] + p[1][3]) >> 2); // G	rgb[1][0].z = (p[1][2]); // R	rgb[1][0].w = 255;						rgb[1][1].x = ((p[2][1] + p[2][3]) >> 1); // B 	rgb[1][1].y = (p[2][2]); // G	rgb[1][1].z = ((p[1][2] + p[3][2]) >> 1); // R	rgb[1][1].w = 255;	// write pixels	write_imageui(left, (int2)(x, y), rgb[0][0]);	write_imageui(left, (int2)(x, y + 1), rgb[0][1]);	write_imageui(left, (int2)(x + 1, y), rgb[1][0]);	write_imageui(left, (int2)(x + 1, y + 1), rgb[1][1]);	p[0][0] = patch[0][0] >> 8;	p[0][1] = patch[0][1] >> 8;	p[0][2] = patch[0][2] >> 8;	p[0][3] = patch[0][3] >> 8;	p[1][0] = patch[1][0] >> 8;	p[1][1] = patch[1][1] >> 8;	p[1][2] = patch[1][2] >> 8;	p[1][3] = patch[1][3] >> 8;	p[2][0] = patch[2][0] >> 8;	p[2][1] = patch[2][1] >> 8;	p[2][2] = patch[2][2] >> 8;	p[2][3] = patch[2][3] >> 8;	p[3][0] = patch[3][0] >> 8;	p[3][1] = patch[3][1] >> 8;	p[3][2] = patch[3][2] >> 8;	p[3][3] = patch[3][3] >> 8;	if (x == 0)	{		p[0][0] = p[0][2];		p[1][0] = p[1][2];		p[2][0] = p[2][2];		p[3][0] = p[3][2];	}	else if (x == get_image_width(src) - 2)	{		p[0][3] = p[0][1];		p[1][3] = p[1][1];		p[2][3] = p[2][1];		p[3][3] = p[3][1];	}	if (y == 0)	{		p[0][0] = p[2][0];		p[0][1] = p[2][1];		p[0][2] = p[2][2];		p[0][3] = p[2][3];	}	else if (y == get_image_height(src) - 2)	{		p[3][0] = p[1][0];		p[3][1] = p[1][1];		p[3][2] = p[1][2];		p[3][3] = p[1][3];	}	rgb[0][0].x = ((p[0][1] + p[2][1]) >> 1); // B 	rgb[0][0].y = (p[1][1]); // G	rgb[0][0].z = ((p[1][0] + p[1][2]) >> 1); // R	rgb[0][0].w = 255;	rgb[0][1].x = (p[2][1]); // B	rgb[0][1].y = ((p[2][0] + p[2][2] + p[1][1] + p[3][1]) >> 2); // G	rgb[0][1].z = ((p[1][0] + p[3][0] + p[1][2] + p[3][2]) >> 2); // R	rgb[0][1].w = 255;	rgb[1][0].x = ((p[0][1] + p[2][1] + p[0][3] + p[2][3]) >> 2); // B	rgb[1][0].y = ((p[0][2] + p[2][2] + p[1][1] + p[1][3]) >> 2); // G	rgb[1][0].z = (p[1][2]); // R	rgb[1][0].w = 255;						rgb[1][1].x = ((p[2][1] + p[2][3]) >> 1); // B 	rgb[1][1].y = (p[2][2]); // G	rgb[1][1].z = ((p[1][2] + p[3][2]) >> 1); // R	rgb[1][1].w = 255;	// write pixels	write_imageui(right, (int2)(x, y), rgb[0][0]);	write_imageui(right, (int2)(x, y + 1), rgb[0][1]);	write_imageui(right, (int2)(x + 1, y), rgb[1][0]);	write_imageui(right, (int2)(x + 1, y + 1), rgb[1][1]);}//// Remap//__kernel void remap(		__read_only image2d_t src,		// CL_UNSIGNED_INT8 x 4		__read_only image2d_t mapX,		// CL_FLOAT		__read_only image2d_t mapY,		// CL_FLOAT		__write_only image2d_t	dst)	// CL_UNSIGNED_INT8 x 4{ 	int x = get_global_id(0);	int y = get_global_id(1);	float X = read_imagef(mapX, (int2)(x, y)).x;	float Y = read_imagef(mapY, (int2)(x, y)).x;	uint4 pixel = read_imageui(src, LINEAR, (float2)(X, Y));	write_imageui(dst, (int2)(x, y), pixel);}//// Split//__kernel void split(		__read_only image2d_t src,	// CL_UNSIGNED_INT16		__write_only image2d_t left,	// CL_UNSIGNED_INT8 x 4		__write_only image2d_t right)	// CL_UNSIGNED_INT8 x 4{	int x = get_global_id(0) * 2;	int y = get_global_id(1) * 2;	uint p = read_imageui(src, (int2)(x, y)).x; // G	write_imageui(left, (int2)(x, y), (uint4)(0, p & 0xff, 0, 255));	write_imageui(right, (int2)(x, y), (uint4)(0, p >> 8, 0, 255));	p = read_imageui(src, (int2)(x + 1, y)).x; // R	write_imageui(left, (int2)(x + 1, y), (uint4)(0, 0, p & 0xff, 255));	write_imageui(right, (int2)(x + 1, y), (uint4)(0, 0, p >> 8, 255));	p = read_imageui(src, (int2)(x, y + 1)).x; // R	write_imageui(left, (int2)(x, y + 1), (uint4)(0, 0, p & 0xff, 255));	write_imageui(right, (int2)(x, y + 1), (uint4)(0, 0, p >> 8, 255));	p = read_imageui(src, (int2)(x + 1, y + 1)).x; // B	write_imageui(left, (int2)(x + 1, y + 1), (uint4)(p & 0xff, 0, 0, 255));	write_imageui(right, (int2)(x + 1, y + 1), (uint4)(p >> 8, 0, 0, 255));}